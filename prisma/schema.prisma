generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Review finsihed for service
model Service {
  id String @id @unique @default(uuid())
  serviceId String?
  serviceTypeId String
  title String
  shortDesc String
  desc String 
  icon String
  longDesc String 
  styles String? 
  images String[]
  benefits String[]
  longBenefits String[]
  instructions Json
  basePrice Float
  hourlyRate Float?
  specialOffer Boolean @default(false)
  subscription Boolean @default(false)
  featured Boolean @default(false)
  tags Tags[]
  reviews Review[]
  testimonials Testimonial[]
  pendingQuotes PendingQuote[]
  completedQuotes CompleteQuote[]
  related Service[] @relation("relatedServices")
  projects Project[] @relation(name: "serviceReference")
  type ServiceType @relation(fields: [serviceTypeId], references: [id])
  relatedServices Service? @relation("relatedServices", fields: [serviceId], references: [id])
}

model Tags {
  id String @id @unique @default(uuid())
  title String
  shortDesc String
  services Service[]
}

model JobHistory {
  id String @id @unique @default(uuid())
  portfolioId String
  companyName String
  jobTitle String
  location String?
  responsibilities String[]
  specialAccomplishments String[]
  stillWorking Boolean @default(false)
  startedAt DateTime 
  endedAt DateTime
  portfolio FreePortfolio @relation(fields: [portfolioId], references: [id])
}

model SpecialtyTags {
  id String @id @unique @default(uuid())
  portfolioId String
  title String
  color String
  portfolio FreePortfolio @relation(fields: [portfolioId], references: [id])
}

model PastPorfolioProjects {
  id String @id @unique @default(uuid())
  portfolioId String
  description String
  headerImg String
  title String
  link String
  favorite Boolean @default(false)
  portfolio FreePortfolio @relation(fields: [portfolioId], references: [id])
}

model FreePortfolio {
 id String @id @unique @default(uuid())
 template String
 name String
 logo String?
 about String?
 avatarUrl String?
 resumeLink String?
 currentTitle String?
 socialMedias String[]
 constactInfo Json?
 createdAt DateTime @default(now())
 updatedAt DateTime @default(now())
 tags SpecialtyTags[]
 pastJobExperiences JobHistory[]
 pastProjects PastPorfolioProjects[]
}

model ServiceType {
  id String @id @unique @default(uuid())
  title String @unique
  shortDesc String
  services Service[]
  priceCard PriceCard?
}

model PriceCard {
  id String @id @unique @default(uuid())
  serviceTypeId String @unique
  tag String
  desc String
  title String
  styles String
  btnTxt String @default("Let's Go!")
  benefits String[]
  startingAtPrice Float
  isMostPopular Boolean @default(false)
  serviceType ServiceType @relation(fields: [serviceTypeId], references: [id])
}

model Review {
  id String  @unique @default(uuid())
  userId String 
  serviceId String 
  managerId String 
  currentReview String
  previousReview String?
  generalComment String?
  communicationComment String?
  projectManagmentComment String?
  understandingNeedsComment String?
  technincalExpertiseComment String?
  supportAndSatisfactionComment String?
  generalRating Int @default(5)
  communicationRating Int @default(5)
  projectManagmentRating Int @default(5)
  understandingNeedsRating Int @default(5)
  technincalExpertiseRating Int @default(5)
  supportAndSatisfactionRating Int @default(5)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  from User @relation(fields: [userId], references: [id])
  to Admin? @relation(fields: [managerId], references: [id])
  service Service? @relation(fields: [serviceId], references: [id])
}

model Testimonial {
  id String @id @unique @default(uuid())
  desc String
  title String
  userId String
  serviceId String
  rating Int @default(5)
  from User @relation(fields: [userId], references: [id])
  service Service @relation(fields: [serviceId], references: [id])
}

model PendingQuote {
  id String @id @unique @default(uuid())
  userId String
  managerId String
  serviceId String
  messageFromUser String
  oldMessagesFromUser String[]
  business Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  dueDate DateTime
  from User @relation(fields: [userId], references: [id])
  to Admin @relation(fields: [managerId], references: [id])
  service Service @relation(fields: [serviceId], references: [id])
}

model CompleteQuote {
  id String @id @unique @default(uuid())
  userId String
  managerId String 
  serviceId String
  messageFromUser String
  oldMessagesFromUser String[]
  business Boolean @default(false)
  updatedAt DateTime @default(now())
  dateCompleted DateTime @default(now())
  user User @relation(fields: [userId], references: [id])
  manager Admin @relation(fields: [managerId], references: [id])
  service Service @relation(fields: [serviceId], references: [id])
}

model Message {
  id String @id @unique @default(uuid())
  userId String
  projectId String
  text String
  read Boolean @default(false)
  sentAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])
}

model Todo {
  id String @id @unique @default(uuid())
  projectId String
  completeId String?
  currentId String?
  text String
  comments String[]
  price Float
  complete Boolean
  admin Boolean @default(true)
  dueDate DateTime @default(now())
  project Project @relation(fields: [projectId], references: [id])
  currentStage CurrentStage? @relation(fields: [currentId], references: [id])
  completedStage CompletedStage? @relation(fields: [completeId], references: [id])
}

model CompletedStage {
  id String @id @unique @default(uuid())
  title String
  projectId String
  description String
  images String[]
  approvedByUser Boolean @default(false)
  approvedByAdmin Boolean @default(false)
  dateCompleted DateTime @default(now())
  receipt Receipt?
  invoice Invoice?
  completedTodos Todo[]
  project Project @relation(fields: [projectId], references: [id])
}

model CurrentStage {
  id String @id @unique @default(uuid())
  projectId String @unique
  title String
  description String
  stageProgress Int @default(0)
  estimatedCompletionDate DateTime
  todos Todo[]
  project Project @relation(fields: [projectId], references: [id])
}

model Project {
  id String @id @unique @default(uuid())
  userId String
  leadId String
  serviceReferenceId String
  type String
  developmentSourceCodeLink String?
  developmentDeploymentLink String?
  progress Int @default(0)
  complete Boolean
  onTime Boolean @default(true)
  createdAt DateTime @default(now())
  currentStage CurrentStage?
  completeProjectReference CompleteProject?
  todos Todo[]
  managers Admin[]
  messages Message[]
  completedStages CompletedStage[]
  user User @relation(fields: [userId], references: [id])
  admin Admin @relation(name: "lead", fields: [leadId], references: [id])
  serviceReference Service @relation(name: "serviceReference", fields: [serviceReferenceId], references: [id])
}

model CompleteProject {
  id String @id @unique @default(uuid())
  projectId String @unique
  userId String
  managerid String
  duration String
  downloadLink String
  webLink String?
  binaryFile Bytes?
  moneySaved Int @default(0)
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id])
  manager Admin @relation(fields: [managerid], references: [id])
  projectReference Project @relation(fields: [projectId], references: [id])
}

model Notification {
  id String @id @unique @default(uuid())
  userId String
  adminId String
  desc String
  title String
  url String?
  delivered Boolean
  read Boolean @default(false)
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id])
  admin Admin @relation(fields: [adminId], references: [id])
}

model Receipt {
  id String @id @unique @default(uuid())
  userId String
  completedStageId String @unique
  paymentMethod String
  transactionNumber String @default(uuid())
  reciteNumber String @unique @default(uuid())
  amountPaid Float
  totalAmount Float
  taxableAmount Float
  transactionDate DateTime @default(now())
  user User @relation(fields: [userId], references: [id])
  completedStage CompletedStage @relation(fields: [completedStageId], references: [id])
}
model Invoice {
  id String @id @unique @default(uuid())
  userId String
  completedStageId String @unique
  invoiceNumber String @unique @default(uuid())
  subTotal Float
  taxableAmount Float
  totalAmountDue Float
  dueDate DateTime
  dateIssued DateTime @default(now())
  user User @relation(fields: [userId], references: [id])
  completedStage CompletedStage @relation(fields: [completedStageId], references: [id])
}

model BlogPost {
  id String @id @unique @default(uuid())
  adminId String
  html String
  desc String
  title String
  headerImg String
  category String[]
  featured Boolean @default(false)
  inReview Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  admin Admin @relation(fields: [adminId], references: [id])
}

model User {
  id String @id @unique @default(uuid())
  email String
  username String
  password String
  phoneNumber String
  avatar String?
  freePortfolioUrl String?
  listedIps String[]
  settings Json
  emergencyContact Json
  authPassCode Int
  moneySaved Int @default(0)
  moneySpent Int @default(0)
  admin Boolean @default(false)
  subscriber Boolean @default(false)
  freePortfolio Boolean @default(false)
  isAuthenticatedPhone Boolean @default(false)
  isAuthenticatedEmail Boolean @default(false)
  authPassCodeExpiresAt DateTime @default(now())
  birthday DateTime?
  reviews Review[]
  messages Message[]
  receipts Receipt[]
  invoices Invoice[]
  currentProjects Project[]
  testimonials Testimonial[]
  pendingQuotes PendingQuote[]
  notifications Notification[]
  pastProjects CompleteProject[]
  completedQuotes CompleteQuote[]
}

model Pay {
  id String @id @unique @default(uuid())
  managerId String @unique
  reviewerId String
  hourlyWage Int @default(0)
  hoursWorked Int @default(0)
  approved Boolean @default(false)
  manager Admin @relation(name: "owner", fields: [managerId], references: [id])
  reviewer Admin @relation(name: "reviewer", fields: [reviewerId], references: [id])
}

model Admin {
  id String @id @unique @default(uuid())
  email String
  avatar String
  wageType String
  username String
  password String
  phoneNumber String
  secondaryEmail String
  listedIps String[]
  settings Json
  emergencyContact Json
  overallRating Int @default(100)
  isAuthenticatedPhone Boolean @default(false)
  isAuthenticatedEmail Boolean @default(false)
  reviews Review[]
  blogPosts BlogPost[]
  notifications Notification[]
  projectsToComplete Project[]
  quotesComplete CompleteQuote[]
  quotesToComplete PendingQuote[]
  projectsComplete CompleteProject[]
  reviewer Pay[] @relation(name: "reviewer")
  leadOnProjects Project[] @relation(name: "lead")
  weeklyPay Pay? @relation(name: "owner")
}
