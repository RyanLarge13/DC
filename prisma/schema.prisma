// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Service {
  id String @id @unique @default(uuid())
  serviceId String
  type String 
  tags String[]
  title String
  shortDesc String
  desc String
  icon String
  styles String?
  price Int
  benefits String
  longBenefits String
  longDesc String
  ratings BigInt
  specialOffer Boolean
  subscription Boolean @default(false)
  hourlyRate Int?
  instructions Json
  images String[]
  featured Boolean
  reviews Review[]
  testimonials Testimonial[]
  pendingQuotes PendingQuote[]
  relatedServices Service?    @relation("relatedServices", fields: [serviceId], references: [id])
  related Service[]   @relation("relatedServices")
}

model Review {
  id         String  @unique @default(uuid())
  serviceId  String
  userId String
  managerId String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  previousReview String?
  currentReview String
  generalRating Int @default(5)
  communicationRating Int @default(5)
  understandingNeedsRating Int @default(5)
  technincalExpertiseRating Int @default(5)
  projectManagmentRating Int @default(5)
  supportAndSatisfactionRating Int @default(5)
  generalComment String?
  communicationComment String?
  understandingNeedsComment String?
  technincalExpertiseComment String?
  projectManagmentComment String?
  supportAndSatisfactionComment String?
  service Service? @relation(fields: [serviceId], references: [id])
  from User @relation(fields: [userId], references: [id])
  to Admin? @relation(fields: [managerId], references: [id])
}

model Testimonial {
  id String @id @unique @default(uuid())
  userId String
  serviceId String
  rating Int @default(5)
  title String
  desc String
  from User @relation(fields: [userId], references: [id])
  service Service @relation(fields: [serviceId], references: [id])
}

model PendingQuote {
  id String @id @unique @default(uuid())
  userId String
  managerId String
  serviceId String
  business Boolean @default(false)
  oldMessageFromUser String?
  messageFromUser String
  dueDate DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  from User @relation(fields: [userId], references: [id])
  to Admin @relation(fields: [managerId], references: [id])
  service Service @relation(fields: [serviceId], references: [id])
}

model CompleteQuote {
  id String @id @unique @default(uuid())
  userId String
  managerId String 
  user User @relation(fields: [userId], references: [id])
  manager Admin @relation(fields: [managerId], references: [id])
}

model Message {
  id String @id @unique @default(uuid())
  userId String
  projectId String
  sentAt DateTime @default(now())
  project Project @relation(fields: [projectId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model Todo {
  id String @id @unique @default(uuid())
  projectId String
  completeId String?
  currentId String?
  text String
  complete Boolean
  comments String[]
  dueDate DateTime @default(now())
  admin Boolean @default(true)
  currentStage CurrentStage? @relation(fields: [currentId], references: [id])
  completedStage CompletedStage? @relation(fields: [completeId], references: [id])
  project Project @relation(fields: [projectId], references: [id])
}

model CompletedStage {
  id String @id @unique @default(uuid())
  projectId String
  images String[]
  title String
  description String
  dateCompleted DateTime @default(now())
  approvedByUser Boolean
  approvedByAdmin Boolean
  completedTodos Todo[]
  project Project @relation(fields: [projectId], references: [id])
}

model CurrentStage {
  id String @id @unique @default(uuid())
  projectId String @unique
  title String
  description String
  stageProgress Int @default(0)
  estimatedCompletionDate DateTime
  todos Todo[]
  project Project @relation(fields: [projectId], references: [id])
}

model Project {
  id String @id @unique @default(uuid())
  userId String
  leadId String
  type String
  developmentSourceCodeLink String?
  developmentDeploymentLink String?
  progress Int @default(0)
  onTime Boolean @default(true)
  complete Boolean
  createdAt DateTime @default(now())
  currentStage CurrentStage?
  todos Todo[]
  completedStages CompletedStage[]
  messages Message[]
  managers Admin[]
  completeProjectReference CompleteProject?
  admin Admin @relation(name: "lead", fields: [leadId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model CompleteProject {
  id String @id @unique @default(uuid())
  userId String
  managerid String
  projectId String @unique
  binaryFile Bytes?
  webLink String?
  downloadLink String
  moneySaved Int @default(0)
  duration String
  createdAt DateTime @default(now())
  projectReference Project @relation(fields: [projectId], references: [id])
  manager Admin @relation(fields: [managerid], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model User {
  id String @id @unique @default(uuid())
  subscriber Boolean @default(false)
  admin Boolean @default(false)
  freePortfolio Boolean @default(false)
  username String
  email String
  password String
  avatar String?
  phoneNumber String
  birthday DateTime?
  emergencyContact Json
  moneySaved Int @default(0)
  moneySpent Int @default(0)
  reviews Review[]
  testimonials Testimonial[]
  pendingQuotes PendingQuote[]
  completedQuotes CompleteQuote[]
  currentProjects Project[]
  pastProjects CompleteProject[]
  messages Message[]
}

model Pay {
  id String @id @unique @default(uuid())
  hourlyWage Int @default(0)
  managerId String @unique
  reviewerId String
  hoursWorked Int @default(0)
  manager Admin @relation(name: "owner", fields: [managerId], references: [id])
  reviewer Admin @relation(name: "reviewer", fields: [reviewerId], references: [id])
}

model Admin {
  id String @id @unique @default(uuid())
  teamId String
  username String
  email String
  secondaryEmail String
  password String
  avatar String
  phoneNumber String
  emergencyContact Json
  overallRating Int @default(100)
  wageType String
  weeklyPay Pay? @relation(name: "owner")
  reviewer Pay[] @relation(name: "reviewer")
  leadOnProjects Project[] @relation(name: "lead")
  quotesToComplete PendingQuote[]
  quotesComplete CompleteQuote[]
  projectsToComplete Project[]
  projectsComplete CompleteProject[]
  reviews Review[]
}
